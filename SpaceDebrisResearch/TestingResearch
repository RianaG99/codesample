s = rng;
rng(2020);
scene = trackingScenario('IsEarthCentered',true, 'InitialAdvance', 'UpdateInterval',...
    'StopTime', 3600, 'UpdateRate', 0.1);

% Generate a population of debris
numDebris = 100;

range = linspace(7e6,2e7,numDebris);
ecc = 0.015 + 0.005*randn(numDebris,1);
inc = 80 + 10*rand(numDebris,1);
lan = 360*rand(numDebris,1);
w = 360*rand(numDebris,1);
nu = 360*rand(numDebris,1);

% Convert to initial position and velocity
for i = 1:numDebris
    [r,v] = oe2rv(range(i),ecc(i),inc(i),lan(i),w(i),nu(i));
    InitialPosition(:,i) = r; %#ok<SAGROW>
    InitialVelocity(:,i) = v; %#ok<SAGROW>
end

d = linspace(0,100,.1);
dt = .1;
state = [InitialPosition(1,1) InitialVelocity(1,1)  InitialPosition(2,1) InitialVelocity(2,1) InitialPosition(3,1) InitialVelocity(3,1)]';

State =  keplerorbit(state,dt);

% Create platforms and assign them trajectories using the keplerorbit motion model
for i=1:numDebris
    
    
    %debris(i) = platform(scene); %#ok<SAGROW> 
    debris(i).Trajectory = helperMotionTrajectory(@keplerorbit,...
        'SampleRate',0.1,... % integration step 10sec
        'Position',InitialPosition(:,1),...
        'Velocity',InitialVelocity(:,1)); %#ok<SAGROW> 
end
